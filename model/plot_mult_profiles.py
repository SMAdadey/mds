#!/usr/bin/env python3

import os,sys,getopt
from matplotlib import pylab
import modeller

if len(sys.argv) != 7:
    print("\nUsage: %s [-w wt_model_profile] [-m mt_model_profile] [-t template_profile]\n" % sys.argv[0])
    usg = """Evaluate Models
        
        -w,--wprofile <str>      :Profile for wild model alignment protein generated by evaluate script (e.g. ocrl_wt/ocrl-mult.profile)
        -m,--mprofile <str>      :Profile for mutant model alignment protein generated by evaluate script (e.g. ocrl_mt/ocrl-mult.profile)
        -t,--tprofile <str>      :Profile for best template protein (e.g. 4cmn.profile)
    """
    print(usg)
    sys.exit(2)

def r_enumerate(seq):
    """Enumerate a sequence in reverse order"""
    # Note that we don't use reversed() since Python 2.3 doesn't have it
    num = len(seq) - 1
    while num >= 0:
        yield num, seq[num]
        num -= 1

def get_profile(profile_file, seq):
    """Read `profile_file` into a Python array, and add gaps corresponding to
       the alignment sequence `seq`."""
    # Read all non-comment and non-blank lines from the file:
    f = open(profile_file)
    vals = []
    for line in f:
        if not line.startswith('#') and len(line) > 10:
            spl = line.split()
            vals.append(float(spl[-1]))
    # Insert gaps into the profile corresponding to those in seq:
    for n, res in r_enumerate(seq.residues):
        for gap in range(res.get_leading_gaps()):
            vals.insert(n, None)
    # Add a gap at position '0', so that we effectively count from 1:
    vals.insert(0, None)
    return vals

def main(argv):
   wp = ''
   mp = ''
   tp = ''
   try:
       opts, args = getopt.getopt(argv,"hw:m:t:",["wprofile=","mprofile=","tprofile="])
   except getopt.GetoptError:
      print('%s -w wt_model_profile -m mt_model_profile -t template_profile' % sys.argv[0])
      sys.exit(2)
   for opt, arg in opts:
      if opt in ('-h','--help'):
         print('%s -w wt_model_profile -m mt_model_profile -t template_profile' % sys.argv[0])
         sys.exit()
      elif opt in (" ", ""):
         print('%s -w wt_model_profile -m mt_model_profile -t template_profile' % sys.argv[0])
         sys.exit()
      elif opt in ("-w", "--wprofile"):
         wp = arg
      elif opt in ("-m", "--mprofile"):
         mp = arg
      elif opt in ("-t", "--tprofile"):
         tp = arg

   pic_out = mp.replace("profile","png")
   
   e = modeller.environ()
   a = modeller.alignment(e, file=mp.replace("profile","ali"))
   
   template = get_profile(tp, a['6Y2HA'])
   wmodel = get_profile(mp, a['CLIC5'])
   mmodel = get_profile(wp, a['CLIC5'])
   
   # Plot the template and model profiles in the same plot for comparison:
   pylab.figure(1, figsize=(10,6))
   pylab.xlabel('Alignment position')
   pylab.ylabel('DOPE per-residue score')
   pylab.plot(template, color='red', linewidth=2, label='Template')
   pylab.plot(wmodel, color='green', linewidth=2, label='Wt multi-template Model')
   pylab.plot(mmodel, color='black', linewidth=2, label='Mt multi-template Model')
   pylab.legend()
   pylab.savefig(pic_out, dpi=65)

if __name__ == "__main__":
    main(sys.argv[1:])
